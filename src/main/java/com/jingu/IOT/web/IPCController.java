/** * 项目名称：IOT * <p> * 类名称：IPCController * <p> * 类描述： * <p> * 创建人：jianghu * <p> * 创建时间：2017年9月7日 下午3:46:50 * <p> * 修改人：jianghu * <p> * 修改时间：2017年9月7日 下午3:46:50 * <p> * 修改备注： 下午3:46:50 * * @version */package com.jingu.IOT.web;import com.jingu.IOT.entity.*;import com.jingu.IOT.entity.HCNetSDK.NET_DVR_COMPRESSIONCFG_V30;import com.jingu.IOT.requset.IPCPointRequset;import com.jingu.IOT.requset.IPCPointsRequest;import com.jingu.IOT.requset.IPCRequest;import com.jingu.IOT.response.IOTResult;import com.jingu.IOT.response.IOTResult2;import com.jingu.IOT.response.PointResult;import com.jingu.IOT.service.*;import com.jingu.IOT.util.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.bind.annotation.*;import java.util.*;/** * @author jianghu * @ClassName: IPCController * @Description: TODO * @date 2017年9月7日 下午3:46:50 摄像头操作 */@RestControllerpublic class IPCController {    // private final Logger logger    // =LoggerFactory.getLogger(CtrlController.class);    private IPCService ipcService;    private ToolUtil toolUtil;    private PointService pointService;    private SettingService settingService;    private RoleService roleService;    private UserService userService;    @Autowired    private CheckUtil checkUtil;    @Autowired    MainDeviceService mainDeviceService;    @Autowired    public IPCController(IPCService ipcService, ToolUtil toolUtil, PointService pointService,                         SettingService settingService, RoleService roleService, UserService userService) {        this.ipcService = ipcService;        this.toolUtil = toolUtil;        this.pointService = pointService;        this.settingService = settingService;        this.roleService = roleService;        this.userService = userService;    }    // 添加摄像头    @CrossOrigin    @RequestMapping(value = "/findIPCById", method = RequestMethod.POST)    public IOTResult findById(@RequestBody IPCRequest ipcRequest) {        IOTResult x = checkUtil.chckSession(ipcRequest, IPCRequest.class);        if (x != null) return x;        IPCEntity ipc = ipcService.getIPCById(ipcRequest);        if (ipc == null)            return new IOTResult(false, "数据不存在", null, Types.STATE_FAIL);        return new IOTResult(true, "请求成功", ipc, Types.STATE_OK);    }    // 添加摄像头    /**     * 先去设置 如果设置失败 再去根据ip&端口&主设备id 获取ipc     *     * @param ipcRequest     * @return     */    @CrossOrigin    @RequestMapping(value = "/addIPC", method = RequestMethod.POST)    public IOTResult addIPC(@RequestBody IPCRequest ipcRequest) {        String config =                "s_nod:" + ipcRequest.getS_nod() +                        ";s_power:" + ipcRequest.getS_power() +                        ";s_ip:" + ipcRequest.getS_ip() +                        ";s_port:" + ipcRequest.getS_port() +                        ";s_username:" + ipcRequest.getS_username() +                        ";s_password:" + ipcRequest.getS_password() +                        ";s_online:" + ipcRequest.getS_online() +                        ";s_stream:" + ipcRequest.getS_stream() + ";";        String proxy_ip = "";        Integer proxy_port = 0;        Map ip_port = mainDeviceService.getIpPort(ipcRequest.getDeviceId());        if (ip_port != null && !ip_port.isEmpty()) {            proxy_ip = (String) ip_port.get("ip");            proxy_port = (Integer) ip_port.get("port");        }        boolean isOk = Client.setIpc1("add", config, ipcRequest.getDeviceId(), proxy_ip, proxy_port);//       boolean isError = Client.setIpc1("add", config, ipcRequest.getDeviceId(), ipcRequest.getPointEntity().getIp(),ipcRequest.getPointEntity().getPort());        if (!isOk) {            System.out.println(isOk);//          String ipc2 = Client.getIpc2(ipcRequest.getPointEntity().getIp(), ipcRequest.getPointEntity().getPort(),            String ipc2 = Client.getIpc2(proxy_ip, proxy_port, ipcRequest.getDeviceId());            if (ipc2 != null && ipc2.length() > 11) {                List<IPCEntity> remote_ipcs = ipcService.parse(ipc2);                System.out.println(remote_ipcs);                if (remote_ipcs == null || remote_ipcs.size() == 0) {                    return new IOTResult(false, "添加失败", null, 0);                }                //校验是否已经存在                for (IPCEntity i : remote_ipcs) {                    if (i.getS_nod() == ipcRequest.getS_nod() &&                            i.getS_ip() == ipcRequest.getS_ip() &&                            i.getS_port() == ipcRequest.getS_port()) {                        return new IOTResult(false, "添加失败,摄像头已存在,请尝试同步！", null, 0);                    } else if (i.getS_nod() == ipcRequest.getS_nod()) {                        return new IOTResult(false, "添加失败,节点" + i.getS_nod() + "已存在！", null, 0);                    }                }                return new IOTResult(false, "添加失败", null, 0);            } else {                return new IOTResult(false, "添加失败,socket连接失败", null, 0);            }        }        PointResult addIPC = ipcService.addIPC(ipcRequest);        if (!addIPC.isSuccess()) {            boolean setIpc12 = Client.setIpc1("delete", config, ipcRequest.getDeviceId(), proxy_ip, proxy_port);            if (setIpc12) {                return new IOTResult(false, "添加失败", null, 5);            }        }        // List<Map<String,Object>> listPoint =        // pointService.listPoint2(pointEntity2);        // HashMap<String,Object> map = new HashMap<>();        // map.put("point", listPoint.get(0));        // map.put("ipc", addIPC.getObject());        if (!addIPC.isSuccess())            return new IOTResult(false, "添加失败", null, 0);        else            return new IOTResult(true, "添加成功", null, 0);    }    // 同步配置  把摄像头同步过来，同时同步监测点    @CrossOrigin    @Transactional(value = "primaryTransactionManager")    @RequestMapping(value = "/autoSyn1", method = RequestMethod.POST)    public IOTResult autoSyn1(@RequestBody IPCRequest ipcRequest) {        IOTResult x = checkUtil.chckSession(ipcRequest, IPCRequest.class);        if (x != null) return x;        x = checkUtil.checkAdmin(ipcRequest, IPCRequest.class);        if (x != null) return x;        String proxy_ip = "";        Integer proxy_port = 0;        Map ip_port = mainDeviceService.getIpPort(ipcRequest.getDeviceId());        if (ip_port != null && !ip_port.isEmpty()) {            proxy_ip = (String) ip_port.get("ip");            proxy_port = (Integer) ip_port.get("port");        } else {            return new IOTResult(false, "同步失败，未发现主设备", null, 0);        }        String ipcs_ = Client.getIpc2(proxy_ip, proxy_port, ipcRequest.getDeviceId());        System.out.println("同步:" + ipcs_);        if (ipcs_ == null) {            return new IOTResult(false, "同步失败，socket异常", null, 0);        }        List<IPCEntity> remote_ipcs = ipcService.parse(ipcs_);        if (remote_ipcs == null || remote_ipcs.size() == 0) {            return new IOTResult(false, "同步失败，未发IPC设备", null, 0);        }        IPCEntity entity = new IPCEntity();        entity.setDeviceId(ipcRequest.getDeviceId());        List<Map<String, Object>> local_ipcs = ipcService.listIPC(entity);        if (local_ipcs == null || local_ipcs.size() == 0)            local_ipcs = new ArrayList<>();        //远端与数据库作对比，相同则更新 不同则删除，多余则插入        //s_nod s_ip s_port 三个参数作对比        int n = 0;        for (IPCEntity i : remote_ipcs) {            i.setDeviceId(ipcRequest.getDeviceId());            boolean match = false;            for (Map m : local_ipcs) {                if (ipcService.match(i, m)) {                    i.setId((Integer) m.get("id"));                    i.setStatus(1);                    ipcService.updateIPC(i);                    local_ipcs.remove(m);                    match = true;                    i.setMapingDeviceId((String) m.get("mapingDeviceId"));                    IOTResult ss = autoSyn(i);//同步监视点                    System.out.println("同步IPC监视点：" + m.get("mapingDeviceId"));                    System.out.println(ss.toString());                    break;                }            }            //save            if (!match) {                n++;                PointEntity p = ipcRequest.getPointEntity();                p.setIp(i.getS_ip());                p.setPort(i.getS_port());                p.setTp_name("摄像头" + n);                IPCRequest rq = new IPCRequest();                rq.setPointEntity(p);                rq.setStatus(1);                rq.setName("摄像头" + n);                rq.setS_ip(i.getS_ip());                rq.setS_port(i.getS_port());                rq.setS_nod(i.getS_nod());                rq.setS_power(i.getS_power());                rq.setS_username(i.getS_username());                rq.setS_password(i.getS_password());                rq.setS_stream(i.getS_stream());                rq.setDeviceId(ipcRequest.getDeviceId());                rq.setS_online(i.getS_online());                PointResult addIPC = ipcService.addIPC(rq);                int ipc_id = ((PointEntity) addIPC.getObject()).getMax_ipc_id();                if (ipc_id > 0) {                    ipcRequest.setId(ipc_id);                    IOTResult ss = autoSyn(ipcRequest);//同步监视点                    System.out.println("同步IPC监视点：" + ipcRequest.getMapingDeviceId());                    System.out.println(ss.toString());                }            }        }        for (Map m : local_ipcs) {            IPCRequest ipc_r = new IPCRequest();            ipc_r.setId((Integer) m.get("id"));            ipc_r.setMapingDeviceId((String) m.get("mapingDeviceId"));            ipcService.deleteIPC(ipc_r);        }        return new IOTResult(true, "同步成功", null, 0);    }    // 同步配置    @CrossOrigin    @Transactional(value = "primaryTransactionManager")    @RequestMapping(value = "/autoSyn", method = RequestMethod.POST)    public IOTResult autoSyn(@RequestBody IPCEntity ipcRequest) {        IPCEntity ipc_ = new IPCEntity();        ipc_.setId(ipcRequest.getId());        IPCEntity ipc = ipcService.getIPC(ipc_);        if (ipc == null) {            return new IOTResult(false, "修改失败,未发现摄像头", null, 4);        }        String proxy_ip = "";        Integer proxy_port = 0;        Map ip_port = mainDeviceService.getIpPort(ipc.getDeviceId());        if (ip_port != null && !ip_port.isEmpty()) {            proxy_ip = (String) ip_port.get("ip");            proxy_port = (Integer) ip_port.get("port");        }        byte b = 1;        List<IPCPointEntity> ipcMonitor2 = Client.getIpcMonitor2(                ipc.getMapingDeviceId(),                ipc.getDeviceId(),                b,                proxy_ip,                proxy_port);        // 删除后再添加  批量添加监视点        IPCPointEntity p = new IPCPointEntity();        p.setDeviceId(ipcRequest.getMapingDeviceId());        if (ipcMonitor2 != null && ipcMonitor2.size() > 0) {            //把旧名字保留            List<Map<String, Object>> ipps = ipcService.listIPCPoint(p);            if (ipps == null) ipps = new ArrayList<>();            for (IPCPointEntity dipp : ipcMonitor2) {                for (Map m : ipps) {                    if (m.get("monitorId") != null && m.get("monitorId").equals(dipp.getMonitorId())) {                        dipp.setMonitorName(m.get("monitorName") == null ? "监视点" + dipp.getMonitorId() : m.get("monitorName").toString());                    }                }            }            //删除            ipcService.deleteIPCPointByDeviceID(p);        } else {            String tip = "";            if (ipcMonitor2 == null) {                tip = "同步失败,连接异常！";            } else {                tip = "同步失败,设备暂无监视点";                //删除//                ipcService.deleteIPCPointByDeviceID(p);            }            return new IOTResult(false, tip, null, 0);        }        int addIPCPointList = ipcService.addIPCPointList(ipcMonitor2);        int updateIPC = ipcService.updateIPC2(ipcRequest.getId(), 1);        if (addIPCPointList > 0 && updateIPC > 0) {            return new IOTResult(true, "同步成功", null, 0);        } else {            throw new RuntimeException("同步失败！");        }    }    // 删除ipc    @CrossOrigin    @RequestMapping(value = "/deleteIPC", method = RequestMethod.POST)    public IOTResult deleteIPC(@RequestBody IPCRequest ipcRequest) {        IOTResult x = checkUtil.chckSession(ipcRequest, IPCRequest.class);        if (x != null) return x;        x = checkUtil.checkAdmin(ipcRequest, IPCRequest.class);        if (x != null) return x;        IPCEntity ipc = ipcService.getIPCById(ipcRequest);        if (ipc == null || ipc.getDeviceId() == null || ipc.getDeviceId().toString().trim().length() < 1) {            return new IOTResult(false, "IPC不存在", null, 4);        }        ipcRequest.setDeviceId(ipc.getDeviceId());        ipcRequest.setMapingDeviceId(ipc.getMapingDeviceId());        String config =                "s_nod:" + ipc.getS_nod() +                        ";s_power:" + ipc.getS_power() +                        ";s_ip:" + ipc.getS_ip() +                        ";s_port:" + ipc.getS_port() +                        ";s_username:" + ipc.getS_username() +                        ";s_password:" + ipc.getS_password() +                        ";s_online:" + ipc.getS_online() +                        ";s_stream:" + ipc.getS_stream() + ";";        String proxy_ip = "";        Integer proxy_port = 0;        Map ip_port = mainDeviceService.getIpPort(ipc.getDeviceId());        if (ip_port != null && !ip_port.isEmpty()) {            proxy_ip = (String) ip_port.get("ip");            proxy_port = (Integer) ip_port.get("port");        }        boolean isOk = Client.setIpc1("delete", config, ipcRequest.getDeviceId(), proxy_ip, proxy_port);        if (isOk) {            int addIPC = ipcService.deleteIPC(ipcRequest);            return new IOTResult(true, "删除成功", null, 0);        }        return new IOTResult(false, "删除失败", null, 5);    }    // 修改ipc配置    @CrossOrigin    @RequestMapping(value = "/updateIPC", method = RequestMethod.POST)    public IOTResult updateIPC(@RequestBody IPCEntity ipcRequest) {        ipcService.updateIPC(ipcRequest);        IPCEntity ipc_ = new IPCEntity();        ipc_.setId(ipcRequest.getId());        IPCEntity ipc = ipcService.getIPC(ipc_);        if (ipc == null) {            return new IOTResult(false, "修改失败,未发现摄像头", null, 4);        }        String config =                "s_nod:" + ipc.getS_nod() +                        ";s_power:" + ipc.getS_power() +                        ";s_ip:" + ipc.getS_ip() +                        ";s_port:" + ipc.getS_port() +                        ";s_username:" + ipc.getS_username() +                        ";s_password:" + ipc.getS_password() +                        ";s_online:" + ipc.getS_online() +                        ";s_stream:" + ipc.getS_stream() + ";";        String proxy_ip = "";        Integer proxy_port = 0;        Map ip_port = mainDeviceService.getIpPort(ipcRequest.getDeviceId());        if (ip_port != null && !ip_port.isEmpty()) {            proxy_ip = (String) ip_port.get("ip");            proxy_port = (Integer) ip_port.get("port");        }        boolean isOk = Client.setIpc1("edit", config, ipcRequest.getDeviceId(), proxy_ip, proxy_port);        if (!isOk) {            return new IOTResult(false, "修改失败", null, 4);        }        int addIPC = ipcService.updateIPC(ipcRequest);        if (addIPC < 1) {            return new IOTResult(false, "修改失败", null, 5);        }        return new IOTResult(true, "修改成功", null, 0);    }    // 修改代理    @CrossOrigin    @RequestMapping(value = "/updateIPCProxy", method = RequestMethod.POST)    public IOTResult updateIPCProxy(@RequestBody IPCRequest ipcRequest) {        IOTResult x = checkUtil.chckSession(ipcRequest, IPCRequest.class);        if (x != null) return x;        x = checkUtil.checkAdmin(ipcRequest, IPCRequest.class);        if (x != null) return x;        if (ipcRequest.getIpc().getId() <= 0) {            //新建            int updateIPCProxy = ipcService.addIPCProxy(ipcRequest.getIpc());            if (updateIPCProxy < 1) {                return new IOTResult(false, "修改失败", null, 0);            }            IPCEntity ipc = new IPCEntity();            ipc.setId(ipcRequest.getId());            if (ipcRequest.getIpc().getType() == 1) {                ipc.setIpcProxyId(updateIPCProxy);            } else {                ipc.setIpcCtrlProxyId(updateIPCProxy);            }            ipcService.updateIPC(ipc);            return new IOTResult(true, "修改成功", updateIPCProxy, 0);        } else {            int updateIPCProxy = ipcService.updateIPCProxy(ipcRequest.getIpc());            if (updateIPCProxy < 1) {                return new IOTResult(false, "修改失败", null, 0);            }        }        return new IOTResult(true, "修改成功", 0, 0);    }    // 获得代理配置    @CrossOrigin    @RequestMapping(value = "/getIPCProxy", method = RequestMethod.POST)    public IOTResult getIPCProxy(@RequestBody IPCRequest ipcRequest) {        IOTResult x = checkUtil.chckSession(ipcRequest, IPCRequest.class);        if (x != null) return x;        Map<String, Object> ctrlProxy = ipcService.getCtrlProxy(ipcRequest.getIpc());        if (ctrlProxy == null) {            return new IOTResult(false, "暂无相关信息", null, 0);        }        return new IOTResult(true, "查看成功", ctrlProxy, 0);    }    // 获得代理配置    @CrossOrigin    @RequestMapping(value = "/listIPCProxy", method = RequestMethod.POST)    public IOTResult listIPCProxy(@RequestBody IPCRequest ipcRequest) {        IOTResult x = checkUtil.chckSession(ipcRequest, IPCRequest.class);        if (x != null) return x;        List<Map<String, Object>> listProxy = ipcService.listProxy(ipcRequest.getIpc());        if (listProxy == null || listProxy.isEmpty()) {            return new IOTResult(false, "暂无相关信息", null, 0);        }        return new IOTResult(true, "查看成功", listProxy, 0);    }    // 查看摄像头    @CrossOrigin    @RequestMapping(value = "/listIPC", method = RequestMethod.POST)    public IOTResult getIPC(@RequestBody IPCRequest ipcRequest) {        IOTResult x = checkUtil.chckSession(ipcRequest, IPCRequest.class);        if (x != null) return x;        // s_ipcnum:2;s_nod:0;s_power:0;s_ip:192.168.0.234;s_port:80;s_username:admin;s_password:12345;s_online:1;s_stream:0;s_nod:0;s_power:0;s_ip:192.168.0.234;s_port:80;s_username:admin;s_password:12345;s_online:1;s_stream:0;        /*String ipc2 = Client.getIpc2(ipcRequest.getPointEntity().getIp(), ipcRequest.getPointEntity().getPort(),                ipcRequest.getPointEntity().getDeviceId());		if (ipc2 == null) {			List<Map<String, Object>> listIPC = ipcService.listIPC(ipcRequest);			for (Map<String, Object> map : listIPC) {				map.put("s_online", 0);			}			return new IOTResult(true, "摄像头存在", listIPC, 0);		}		if (ipc2.length() > 11) {			int indexOf = ipc2.indexOf(";");			String substring = ipc2.substring(indexOf + 1);			System.out.println(substring);			String[] split2 = substring.split(";");			Map<String, String> map = new HashMap<>();			for (int i = 0; i < split2.length; i++) {				String[] split3 = split2[i].split(":");				map.put(split3[0], split3[1]);				if (map.containsKey("s_stream")) {					map.put("deviceId", ipcRequest.getDeviceId());					int updateIPC = ipcService.updateIPC2(map);					map.remove("s_stream", map.get("s_stream"));				}			}		}*/        List<Map<String, Object>> listIPC = ipcService.listIPC(ipcRequest);        if (listIPC == null || listIPC.size() < 1) {            return new IOTResult(false, "该节点下不存在摄像头", null, 0);        }        return new IOTResult(true, "摄像头存在", listIPC, 0);    }    // 获得ipc編碼的设置    @CrossOrigin    @RequestMapping(value = "/getIPCCodeing", method = RequestMethod.POST)    public IOTResult getIPCSetting(@RequestBody IPCRequest ipcRequest) {        IOTResult x = checkUtil.chckSession(ipcRequest, IPCRequest.class);        if (x != null) return x;        try {            // 记得扩充ipc表,填入信息            IPCEntity ipc = ipcService.getIPC(ipcRequest);            IPCProxyEntity pe = new IPCProxyEntity();            pe.setType(ipcRequest.getType());            if (ipcRequest.getType() == 2)                pe.setId(ipcRequest.getIpcCtrlProxyId());            if (ipcRequest.getType() == 1)                pe.setId(ipcRequest.getIpcProxyId());            if (pe.getType() == 0)                return new IOTResult(false, "缺少代理类型参数", null, 0);            pe.setMapingDeviceId(ipcRequest.getMapingDeviceId());            Map<String, Object> proxy = ipcService.getProxy(pe);            if (proxy == null)                return new IOTResult(false, "请先正确配置控制代理", proxy, 0);            if (!CommonUtils.has(proxy.get("s_username")))                return new IOTResult(false, "请先配置登录账号", proxy, 0);            if (!CommonUtils.has(proxy.get("s_password")))                return new IOTResult(false, "请先配置登录密码", proxy, 0);            if (!CommonUtils.has(proxy.get("s_proxy")))                return new IOTResult(false, "请先配置控制代理的映射端口", proxy, 0);            String proxy_ip = ipcRequest.getPointEntity().getIp();            Integer proxy_port = ipcRequest.getPointEntity().getPort();            Map ip_port = mainDeviceService.getIpPort(ipcRequest.getDeviceId());            if (ip_port != null && !ip_port.isEmpty()) {                proxy_ip = (String) ip_port.get("ip");                proxy_port = (Integer) ip_port.get("port");            }            String name = (String) proxy.get("s_username");            String password = (String) proxy.get("s_password");            String s_proxy = (String) proxy.get("s_proxy");            String deviceId = (String) proxy.get("deviceId");            // 条件代表还没有            String config =                    "s_no:" + proxy.get("s_nod") +                            ";s_host:" + proxy.get("s_host") +                            ";s_rport:" + proxy.get("s_hostport") +                            ";s_lport:" + proxy.get("s_proxy") +                            ";s_pwr:" + proxy.get("s_pwr") +                            ";s_pwrval:" + proxy.get("s_pwrval") +                            ";s_timeout:" + (proxy.get("s_timeout") == null ? "150" : proxy.get("s_timeout")) + ";";            System.out.println("add_config:" + config);            String config_old = Client.getIpcProxy1(deviceId, proxy_ip, proxy_port);            System.out.println("config_old:" + config_old);            String status = Client.setIpcProxyEx1("add", config, deviceId, proxy_ip, proxy_port);            String config_now = Client.getIpcProxy1(deviceId, proxy_ip, proxy_port);            System.out.println("config_now:" + config_now);            if (!status.equals("ok") && !status.equals("01")) {                System.out.println("设置IPC代理失败--/getIPCCodeing");                return new IOTResult(false, "查看失败，设置IPC代理失败", proxy, 0);            }            System.out.println("status:" + status);            //读取信息            VideoShemaBean ipcAbility = HkSdkEx.getIpcAbility(name, password, proxy_ip, s_proxy);            if (ipcAbility == null) {                ipcAbility = HkSdkEx.getIpcAbility(name, password, proxy_ip, s_proxy);                if (ipcAbility == null)                    return new IOTResult(false, "查看失败，获取信息失败", null, 5);            }            Map<String, Object> map = new HashMap<>();            map.put("ablity", ipcAbility);            VideoParamsBean videoParamsBean = null;            videoParamsBean = new VideoParamsBean();            NET_DVR_COMPRESSIONCFG_V30 compressInfo = HkSdkEx.getCompressInfo(ipc.getS_username(), ipc.getS_password(), proxy_ip, s_proxy);            videoParamsBean.parse(compressInfo);            map.put("setting", videoParamsBean);            return new IOTResult(true, "查看成功", map, 0);        } catch (Exception e) {            return new IOTResult(false, "查看失败，soket异常", null, 0);        }    }    // 设置ipc的编码//通道参数    @CrossOrigin    @RequestMapping(value = "/setIPCCodeing", method = RequestMethod.POST)    public IOTResult setIPCCodeing(@RequestBody IPCRequest ipcRequest) {        IOTResult x = checkUtil.chckSession(ipcRequest, IPCRequest.class);        if (x != null) return x;        x = checkUtil.checkAdmin(ipcRequest, IPCRequest.class);        if (x != null) return x;        List<Map<String, Object>> listIPC = ipcService.listIPC(ipcRequest);        if (listIPC == null || listIPC.size() < 1) {            return new IOTResult(false, "该节点下不存在摄像头", null, 4);        }        // 记得扩充ipc表,填入信息        IPCEntity ipc = ipcService.getIPC(ipcRequest);        IPCProxyEntity pe = new IPCProxyEntity();        pe.setType(ipcRequest.getType());        if (ipcRequest.getType() == 2)            pe.setId(ipcRequest.getIpcCtrlProxyId());        if (ipcRequest.getType() == 1)            pe.setId(ipcRequest.getIpcProxyId());        if (pe.getType() == 0)            return new IOTResult(false, "缺少代理类型参数", null, 0);        pe.setMapingDeviceId(ipcRequest.getMapingDeviceId());        Map<String, Object> proxy = ipcService.getProxy(pe);        if (proxy == null)            return new IOTResult(false, "请先正确配置控制代理", proxy, 0);        if (!CommonUtils.has(proxy.get("s_username")))            return new IOTResult(false, "请先配置登录账号", proxy, 0);        if (!CommonUtils.has(proxy.get("s_password")))            return new IOTResult(false, "请先配置登录密码", proxy, 0);        if (!CommonUtils.has(proxy.get("s_proxy")))            return new IOTResult(false, "请先配置控制代理的映射端口", proxy, 0);        String name = proxy.get("s_username").toString();        String password = proxy.get("s_password").toString();        String s_proxy = proxy.get("s_proxy").toString();        String deviceId = proxy.get("deviceId").toString();        String proxy_ip = ipcRequest.getPointEntity().getIp();        Integer proxy_port = ipcRequest.getPointEntity().getPort();        Map ip_port = mainDeviceService.getIpPort(ipcRequest.getDeviceId());        if (ip_port != null && !ip_port.isEmpty()) {            proxy_ip = (String) ip_port.get("ip");            proxy_port = (Integer) ip_port.get("port");        }        // 条件代表还没有        // int compareTo = ipcRequest.compareTo(proxy);        // if(compareTo == 0){        // return new IOTResult(true,"没有要修改的参数",null,11);        // }        NET_DVR_COMPRESSIONCFG_V30 compressInfo = HkSdkEx.getCompressInfo(name, password, proxy_ip, s_proxy);        NET_DVR_COMPRESSIONCFG_V30 compressionCfg = ipcRequest.getVideoParamsBean().toCompressionCfg(compressInfo);        boolean setCompressInfo = HkSdkEx.setCompressInfo(name, password, proxy_ip, s_proxy, compressionCfg);        if (!setCompressInfo) {            return new IOTResult(false, "配置失败", null, 5);        }        if (ipcRequest.getCktime() == 1) {            Calendar instance = Calendar.getInstance();            HCNetSDK.NET_DVR_TIME m_struTime = new HCNetSDK.NET_DVR_TIME();            m_struTime.dwYear = instance.get(Calendar.YEAR);            m_struTime.dwMonth = instance.get(Calendar.MONTH);            m_struTime.dwDay = instance.get(Calendar.DATE);            m_struTime.dwHour = instance.get(Calendar.HOUR_OF_DAY);            m_struTime.dwMinute = instance.get(Calendar.MINUTE);            m_struTime.dwSecond = instance.get(Calendar.SECOND);            boolean setSetDateTime = HkSdkEx.setSetDateTime(name, password, proxy_ip, s_proxy, m_struTime);            System.out.println(setSetDateTime);        }        return new IOTResult(true, "配置成功", null, 0);    }    // pc获得监视点    @CrossOrigin    @RequestMapping(value = "/getIPCPoint", method = RequestMethod.POST)    public IOTResult getIPCPoint(@RequestBody Map<String, String> map) {        IPCPointEntity ipce = new IPCPointEntity();        ipce.setDeviceId(map.get("deviceId"));        ipce.setBeginTime(map.get("beginTime"));        ipce.setEndTime(map.get("endTime"));        ipce.setSuccess(1);        IPCEntity ipc = new IPCEntity();        ipc.setMapingDeviceId(map.get("deviceId"));        ipc.setS_username(map.get("username"));        ipc.setS_password(map.get("password"));        List<Map<String, Object>> listIPC = ipcService.listIPC(ipc);        if (listIPC == null || listIPC.isEmpty()) {            return new IOTResult(false, "密码错误", null, 0);        }        List<Map<String, Object>> listIPCPoint = ipcService.ckIPCPoint(ipce);        if (listIPCPoint == null || listIPCPoint.isEmpty()) {            return new IOTResult(false, "暂无相关信息", null, 0);        }        return new IOTResult(true, "查看成功", listIPCPoint, 0);    }    // App获得监视点    @CrossOrigin    @RequestMapping(value = "/getAppIPCPoint", method = RequestMethod.POST)    public IOTResult getAppIPCPoint(@RequestBody IPCPointRequset ipcPointRequset) {        IOTResult x = checkUtil.chckSession(ipcPointRequset, IPCPointRequset.class);        if (x != null) return x;        List<Map<String, Object>> appIPCPoint = ipcService.getAppIPCPoint(ipcPointRequset);        if (appIPCPoint == null || appIPCPoint.isEmpty()) {            return new IOTResult(false, "暂无相关信息", null, 0);        }        return new IOTResult(true, "查看成功", appIPCPoint, 0);    }    // 添加监视点    @CrossOrigin    @RequestMapping(value = "/addIPCPoint", method = RequestMethod.POST)    public IOTResult addIPCPoint(@RequestBody IPCPointRequset ipc_p) {        IOTResult x = checkUtil.chckSession(ipc_p, IPCPointRequset.class);        if (x != null) return x;        x = checkUtil.checkAdmin(ipc_p, IPCPointRequset.class);        if (x != null) return x;        MonitorHBM hbm = new MonitorHBM();        hbm.setBeginTime(ipc_p.getBeginTime());// "12:00:00"        hbm.setEndTime(ipc_p.getEndTime());// 18:00:00"        hbm.setCycleDay(ipc_p.getCycleDay());        int lastIndexOf = ipc_p.getDeviceId().lastIndexOf(".");        //主设备id        String mdid = ipc_p.getDeviceId().substring(0, lastIndexOf);        hbm.setDeviceId(ipc_p.getDeviceId());        hbm.setMonitorName(ipc_p.getMonitorName());        if (ipc_p.getMonitorId() < 1) {            int maxMonitorId = ipcService.getMaxMonitorId(ipc_p.getDeviceId());            ipc_p.setMonitorId(maxMonitorId + 1);        }        hbm.setMonitorId(ipc_p.getMonitorId());        hbm.setRateSecond(ipc_p.getRateSecond());        // 此处查找代理        Map m = mainDeviceService.getIpPort(mdid);        String ip = ipc_p.getPointEntity().getIp();        int port = ipc_p.getPointEntity().getPort();        if (m != null) {            ip = (String) m.get("ip");            port = (int) m.get("port");        }        byte b = 1;        boolean setIpcMonitor = Client.setIpcMonitor(ip, port, b, hbm);        if (setIpcMonitor) {            ipc_p.setSuccess(1);            if (ipc_p.getId() > 0) {                int addIPCPoint = ipcService.updateIPCPoint(ipc_p);                if (addIPCPoint > 0) {                    return new IOTResult(true, "监视点修改成功", null, 0);                }                return new IOTResult(false, "监视点修改失败", null, 3);            }            int addIPCPoint = ipcService.addIPCPoint(ipc_p);            int ipcPointId = ipcService.getIPCPointId(ipc_p.getDeviceId(), ipc_p.getMonitorId());            HashMap<Object, Object> hashMap = new HashMap<>();            hashMap.put("ipcPointId", ipcPointId);            hashMap.put("deviceId", hbm.getDeviceId());            hashMap.put("monitorId", hbm.getMonitorId());            if (addIPCPoint > 0) {                return new IOTResult(true, "监视点设置成功", hashMap, 0);            }            Client.delIpcMonitor(ip, port, b, hbm);        }        return new IOTResult(false, "监视点设置失败", hbm, 3);    }    // 添加监视点    @CrossOrigin    @RequestMapping(value = "/addIPCPoint2", method = RequestMethod.POST)    public IOTResult addIPCPoint2(@RequestBody IPCPointRequset ipc_p) {        IOTResult x = checkUtil.chckSession(ipc_p, IPCPointRequset.class);        if (x != null) return x;        x = checkUtil.checkAdmin(ipc_p, IPCPointRequset.class);        if (x != null) return x;        ipc_p.setBeginTime("12:00:00");        ipc_p.setEndTime("18:00:00");        ipc_p.setMonitorName("");        ipc_p.setCycleDay(1);        ipc_p.setRateSecond(5);        MonitorHBM hbm = new MonitorHBM();        hbm.setBeginTime(ipc_p.getBeginTime());// "12:00:00"        hbm.setEndTime(ipc_p.getEndTime());// 18:00:00"        hbm.setCycleDay(ipc_p.getCycleDay());        int lastIndexOf = ipc_p.getDeviceId().lastIndexOf(".");        String mdid = ipc_p.getDeviceId().substring(0, lastIndexOf);        hbm.setDeviceId(ipc_p.getDeviceId());        hbm.setMonitorName(ipc_p.getMonitorName());        if (ipc_p.getMonitorId() < 1) {            int maxMonitorId = ipcService.getMaxMonitorId(ipc_p.getDeviceId());            ipc_p.setMonitorId(maxMonitorId + 1);        }        hbm.setMonitorId(ipc_p.getMonitorId());        hbm.setRateSecond(ipc_p.getRateSecond());        // hbm.set        // 此处查找代理        Map m = mainDeviceService.getIpPort(mdid);        String ip = ipc_p.getPointEntity().getIp();        int port = ipc_p.getPointEntity().getPort();        if (m != null) {            ip = (String) m.get("ip");            port = (int) m.get("port");        }        byte b = 1;        boolean setIpcMonitor = Client.setIpcMonitor(ip, port, b, hbm);        if (setIpcMonitor) {            ipc_p.setSuccess(1);            if (ipc_p.getId() > 0) {                int addIPCPoint = ipcService.updateIPCPoint(ipc_p);                if (addIPCPoint > 0) {                    return new IOTResult(true, "监视点修改成功", null, 0);                }                return new IOTResult(false, "监视点修改失败", null, 3);            }            int addIPCPoint = ipcService.addIPCPoint(ipc_p);            int ipcPointId = ipcService.getIPCPointId(ipc_p.getDeviceId(), ipc_p.getMonitorId());            HashMap<Object, Object> hashMap = new HashMap<>();            hashMap.put("ipcPointId", ipcPointId);            hashMap.put("deviceId", hbm.getDeviceId());            hashMap.put("monitorId", hbm.getMonitorId());            if (addIPCPoint > 0) {                return new IOTResult(true, "监视点设置成功", hashMap, 0);            }            Client.delIpcMonitor(ip, port, b, hbm);        }        return new IOTResult(false, "监视点设置失败", hbm, 3);    }    // 修改监视点    @CrossOrigin    @RequestMapping(value = "/updateIPCPoint", method = RequestMethod.POST)    public IOTResult updateIPCPoint(@RequestBody IPCPointRequset ipc_p) {        IOTResult x = checkUtil.chckSession(ipc_p, IPCPointRequset.class);        if (x != null) return x;        x = checkUtil.checkAdmin(ipc_p, IPCPointRequset.class);        if (x != null) return x;        MonitorHBM hbm = new MonitorHBM();        hbm.setBeginTime(ipc_p.getBeginTime());// "12:00:00"        hbm.setEndTime(ipc_p.getEndTime());// 18:00:00"        hbm.setCycleDay(ipc_p.getCycleDay());        int lastIndexOf = ipc_p.getDeviceId().lastIndexOf(".");        String mdid = ipc_p.getDeviceId().substring(0, lastIndexOf);        hbm.setDeviceId(ipc_p.getDeviceId());        hbm.setMonitorName(ipc_p.getMonitorName());        hbm.setMonitorId(ipc_p.getMonitorId());        hbm.setRateSecond(ipc_p.getRateSecond());        // hbm.set        // 此处查找代理        Map m = mainDeviceService.getIpPort(mdid);        String ip = ipc_p.getPointEntity().getIp();        int port = ipc_p.getPointEntity().getPort();        if (m != null) {            ip = (String) m.get("ip");            port = (int) m.get("port");        }        byte b = 1;        boolean setIpcMonitor = Client.setIpcMonitor(ip, port, b, hbm);        if (setIpcMonitor) {            ipc_p.setSuccess(1);            int addIPCPoint = ipcService.updateIPCPoint(ipc_p);            if (addIPCPoint > 0) {                return new IOTResult(true, "监视点修改成功", null, 0);            }            Client.delIpcMonitor(ip, port, b, hbm);        }        return new IOTResult(false, "监视点设置失败", null, 3);        // System.out.println(setIpcMonitor);    }    //    // 修改监视点    @CrossOrigin    @RequestMapping(value = "/updateAppIPCPoint", method = RequestMethod.POST)    public IOTResult updateAppIPCPoint(@RequestBody IPCPointRequset ipc_p) {        IOTResult x = checkUtil.chckSession(ipc_p, IPCPointRequset.class);        if (x != null) return x;        x = checkUtil.checkAdmin(ipc_p, IPCPointRequset.class);        if (x != null) return x;        ipc_p.setBeginTime("12:00:00");        ipc_p.setEndTime("18:00:00");        ipc_p.setRateSecond(5);        ipc_p.setCycleDay(1);        ipc_p.setMonitorName("");        MonitorHBM hbm = new MonitorHBM();        hbm.setBeginTime(ipc_p.getBeginTime());// "12:00:00"        hbm.setEndTime(ipc_p.getEndTime());// 18:00:00"        hbm.setCycleDay(ipc_p.getCycleDay());        int lastIndexOf = ipc_p.getDeviceId().lastIndexOf(".");        String mdid = ipc_p.getDeviceId().substring(0, lastIndexOf);        hbm.setDeviceId(ipc_p.getDeviceId());        hbm.setMonitorName(ipc_p.getMonitorName());        hbm.setMonitorId(ipc_p.getMonitorId());        hbm.setRateSecond(ipc_p.getRateSecond());        // hbm.set        // 此处查找代理        Map m = mainDeviceService.getIpPort(mdid);        String ip = ipc_p.getPointEntity().getIp();        int port = ipc_p.getPointEntity().getPort();        if (m != null) {            ip = (String) m.get("ip");            port = (int) m.get("port");        }        byte b = 1;        boolean setIpcMonitor = Client.setIpcMonitor(ip, port, b, hbm);        if (setIpcMonitor) {            ipc_p.setSuccess(1);            return new IOTResult(true, "摄像头调整成功", null, 0);        }        return new IOTResult(false, "摄像头调整失败", null, 3);    }    //    // 删除监视点    @CrossOrigin    @RequestMapping(value = "/deleteIPCPoint", method = RequestMethod.POST)    public IOTResult deleteIPCPoint(@RequestBody IPCPointRequset ipc_p) {        IOTResult x = checkUtil.chckSession(ipc_p, IPCPointRequset.class);        if (x != null) return x;        x = checkUtil.checkAdmin(ipc_p, IPCPointRequset.class);        if (x != null) return x;        Map<String, Object> ipcPoint = ipcService.getIPCPoint(ipc_p);        if (ipcPoint == null || ipcPoint.get("deviceId") == null                || ipcPoint.get("deviceId").toString().trim().length() < 1) {            return new IOTResult(true, "监视点不存在", null, 4);        }        MonitorHBM hbm = new MonitorHBM();        hbm.setMonitorId(Integer.parseInt(ipcPoint.get("monitorId").toString()));        hbm.setBeginTime(ipcPoint.get("beginTime").toString());// "12:00:00"        hbm.setEndTime(ipcPoint.get("endTime").toString());// 18:00:00"        hbm.setCycleDay(Integer.parseInt(ipcPoint.get("cycleDay").toString()));        int lastIndexOf = ipcPoint.get("deviceId").toString().lastIndexOf(".");        String mdid = ipcPoint.get("deviceId").toString().substring(0, lastIndexOf);        hbm.setDeviceId(ipcPoint.get("deviceId").toString());        hbm.setMonitorName(ipcPoint.get("monitorName").toString());        hbm.setRateSecond(Integer.parseInt(ipcPoint.get("rateSecond").toString()));        // hbm.set        // 此处查找代理        Map m = mainDeviceService.getIpPort(mdid);        String ip = ipc_p.getPointEntity().getIp();        int port = ipc_p.getPointEntity().getPort();        if (m != null) {            ip = (String) m.get("ip");            port = (int) m.get("port");        }        byte b = 1;        boolean setIpcMonitor = Client.delIpcMonitor(ip, port, b, hbm);        if (setIpcMonitor) {            int addIPCPoint = ipcService.deleteIPCPoint(ipc_p);            if (addIPCPoint > 0) {                return new IOTResult(true, "监视点删除成功", null, 0);            }            Client.setIpcMonitor(ip, port, b, hbm);        }        return new IOTResult(false, "监视点删除失败", null, 3);    }    // 删除监视点    @CrossOrigin    @RequestMapping(value = "/deleteIPCPointBatch", method = RequestMethod.POST)    public IOTResult deleteIPCPointBatch(@RequestBody IPCPointsRequest points) {        IOTResult x = checkUtil.chckSession(points, IPCPointRequset.class);        if (x != null) return x;        x = checkUtil.checkAdmin(points, IPCPointRequset.class);        if (x != null) return x;        List<IPCPointEntity> ipcPointList = points.getIpcPointList();        String idString = points.getIdString();        String[] split = idString.split(",");        IPCPointEntity ipcPointEntity = new IPCPointEntity();        for (String string : split) {            ipcPointEntity.setId(Integer.parseInt(string));            Map<String, Object> ipcPoint = ipcService.getIPCPoint(ipcPointEntity);            if (ipcPoint == null || ipcPoint.get("deviceId") == null                    || ipcPoint.get("deviceId").toString().trim().length() < 1) {                return new IOTResult(true, "监视点不存在", null, 4);            }            MonitorHBM hbm = new MonitorHBM();            hbm.setMonitorId(Integer.parseInt(ipcPoint.get("monitorId").toString()));            hbm.setBeginTime(ipcPoint.get("beginTime").toString());// "12:00:00"            hbm.setEndTime(ipcPoint.get("endTime").toString());// 18:00:00"            hbm.setCycleDay(Integer.parseInt(ipcPoint.get("cycleDay").toString()));            hbm.setDeviceId(ipcPoint.get("deviceId").toString());            hbm.setMonitorName(ipcPoint.get("monitorName").toString());            hbm.setRateSecond(Integer.parseInt(ipcPoint.get("rateSecond").toString()));            // hbm.set            byte b = 1;            boolean setIpcMonitor = Client.delIpcMonitor(points.getPointEntity().getIp(),                    points.getPointEntity().getPort(), b, hbm);            System.out.println("删除监视点" + ipcPoint.get("monitorId").toString() + setIpcMonitor);            if (setIpcMonitor) {                int addIPCPoint = ipcService.deleteIPCPoint(ipcPointEntity);            }        }        return new IOTResult(true, "监视点删除成功", null, 0);        // for (IPCPointEntity ipcPointEntity : ipcPointList) {        // Map<String, Object> ipcPoint =        // ipcService.getIPCPoint(ipcPointEntity);        // if(ipcPoint == null || ipcPoint.get("deviceId")==null        // ||ipcPoint.get("deviceId").toString().trim().length()<1){        // return new IOTResult(true,"监视点不存在",null,4);        // }        // MonitorHBM hbm = new MonitorHBM();        // hbm.setMonitorId(Integer.parseInt(ipcPoint.get("monitorId").toString()));        // hbm.setBeginTime(ipcPoint.get("beginTime").toString());//"12:00:00"        // hbm.setEndTime(ipcPoint.get("endTime").toString());//18:00:00"        // hbm.setCycleDay(Integer.parseInt(ipcPoint.get("cycleDay").toString()));        // hbm.setDeviceId(ipcPoint.get("deviceId").toString());        // hbm.setMonitorName(ipcPoint.get("monitorName").toString());        // hbm.setRateSecond(Integer.parseInt(ipcPoint.get("rateSecond").toString()));        // //hbm.set        // byte b =1;        // boolean setIpcMonitor =        // Client.delIpcMonitor(points.getPointEntity().getIp(),        // points.getPointEntity().getPort(), b, hbm);        // System.out.println("删除监视点"+ipcPoint.get("monitorId").toString()+setIpcMonitor);        // if(setIpcMonitor){        // int addIPCPoint = ipcService.deleteIPCPoint(ipcPointEntity);        // }        //// return new IOTResult(false,"监视点删除失败",null,3);        // }        // return new IOTResult(true,"监视点删除成功",null,0);        // return null;        /*         * if(ipcRequest.getCksid()==null ||		 * ipcRequest.getCksid().trim().length()<1||ipcRequest.getCkuid()==null|		 * |ipcRequest.getCkuid().trim().length()<1){ return new		 * IOTResult(false,"信息不规范",null,1); } // 注册登陆按照什么来???? String check =		 * toolUtil.getCheck(ToolUtil.IOT+ipcRequest.getCkuid()); if(check		 * ==null ||!ipcRequest.getCksid().equals(check)){ return new		 * IOTResult(false,"登陆失效",null,2); } long uid =		 * toolUtil.getbase_uidSid(ipcRequest.getCkuid(),		 * ipcRequest.getCksid()); ipcRequest.setUid(uid); PointEntity		 * pointEntity = new PointEntity(); pointEntity.setUid(1); // 修改		 * if(ipcRequest.getId()>0){ pointEntity.setTp_id(ipcRequest.getId());		 * PointEntity point = pointService.getPoint(pointEntity); if(		 * pointEntity.getTp_pid()!=0){ if(point==null){ return new		 * IOTResult(false,"节点不存在",null,3); } } if(ipcRequest.getTp_type()!=4){		 * return new IOTResult(false,"类型不正确",null,5); } String deviceId =		 * ipcRequest.getDeviceId(); if(deviceId==null ||		 * ipcRequest.getDeviceId().trim().length()<1){ return new		 * IOTResult(false,"请输入设备号",null,7); } int updateMainDevice =0; try {		 * updateMainDevice = ipcService.updateMainDevice(ipcRequest); } catch		 * (Exception e) { // TODO Auto-generated catch block		 * e.printStackTrace(); return new IOTResult(false,"节点修改失败",null,11); }		 * switch (updateMainDevice) { case 1: return new		 * IOTResult(true,"节点添加成功",null,6); case 2: return new		 * IOTResult(false,"请输入正确的链接方式",null,9); case 3: return new		 * IOTResult(false,"请输入正确的ip port和链接方式",null,10); default: return new		 * IOTResult(false,"节点添加失败",null,8); } }		 * pointEntity.setTp_id(ipcRequest.getTp_pid()); PointEntity point =		 * pointService.getPoint(pointEntity); if( pointEntity.getTp_pid()!=0){		 * if(point==null){ return new IOTResult(false,"父节点不存在",null,3); } }		 * if(!point.get("uid").equals(uid)){ return new		 * IOTResult(false,"您无权添加到该节点下",null,4); }		 * if(ipcRequest.getTp_type()!=4){ return new		 * IOTResult(false,"类型不正确",null,5); } String maxId =		 * toolUtil.getMaxId(ToolUtil.TREEID); if(maxId ==null){		 * toolUtil.setMaxId(ToolUtil.TREEID, 0); } Long maxIdInc =		 * toolUtil.MaxIdInc(ToolUtil.TREEID);		 * ipcRequest.setId(maxIdInc.intValue()); String deviceId =		 * ipcRequest.getDeviceId(); if(deviceId==null ||		 * ipcRequest.getDeviceId().trim().length()<1){ return new		 * IOTResult(false,"请输入设备号",null,7); } int addPoint; try { addPoint =		 * ipcService.addIPC(ipcRequest); } catch (Exception e) { // TODO		 * Auto-generated catch block e.printStackTrace(); return new		 * IOTResult(false,"节点添加失败",null,8); } // 您无权添加到该节点下 // 节点不存在		 * if(addPoint ==1){ return new IOTResult(true,"节点添加成功",null,6); }		 * switch (addPoint) { case 1: return new		 * IOTResult(true,"节点添加成功",null,6); case 2: return new		 * IOTResult(false,"请输入正确的链接方式",null,9); case 3: return new		 * IOTResult(false,"请输入正确的ip port和链接方式",null,10); default: return new		 * IOTResult(false,"节点添加失败",null,8); } }		 */        /*         * IPCPointEntity ipce = null; byte b =1; int i =0;		 * //List<Map<String,Object>> listIPCPoint =		 * ipcService.listIPCPoint(ipce); List<IPCPointEntity> ipcMonitor2 =		 * Client.getIpcMonitor2("10.00.21.74.01", "10.00.21.74", b,		 * "192.168.0.168", 52390); for (IPCPointEntity ipcPointEntity :		 * ipcMonitor2) { ipcPointEntity.setId(i++); int addIPCPoint =		 * ipcService.addIPCPoint(ipcPointEntity); } return new		 * IOTResult(true,"查看成功",null,0);		 */    }    // @CrossOrigin    // @RequestMapping(value="/listIPCPointIMG",method=RequestMethod.POST)    // public IOTResult listIPCPointIMG(@RequestBody Map<String, String> map) {    // IPCPointEntity ipce = new IPCPointEntity();    // String deivceId = map.get("deviceId");    // String beginTime = map.get("beginTime");    // String endTime = map.get("endTime");    // String monitorId = map.get("monitorId");    // /*ipce.setDeviceId("10.00.21.74.01");    // ipce.setMonitorId(1);    // ipce.setBeginTime("2017-09-01");    // ipce.setEndTime("2017-09-07");*/    // ipce.setDeviceId(deivceId);    // ipce.setBeginTime(beginTime);    // ipce.setEndTime(endTime);    // ipce.setMonitorId(Integer.parseInt(monitorId));    // List<Map<String,Object>> listIPCPointIMG =    // ipcService.listIPCPointIMG(ipce);    // return new IOTResult(true,"查看成功",listIPCPointIMG,0);    // }    // 物联网获得图片    @CrossOrigin    @RequestMapping(value = "/listIPCPointImg", method = RequestMethod.POST)    public IOTResult listIPCPointImg(@RequestBody Map<String, String> map) {        IPCPointEntity ipce = new IPCPointEntity();        String deivceId = map.get("deviceId");        String beginTime = map.get("beginTime");        String endTime = map.get("endTime");        String monitorId = map.get("monitorId");        // 应该要改下逻辑        ipce.setDeviceId(deivceId);        ipce.setBeginTime(beginTime);        ipce.setEndTime(endTime);        ipce.setMonitorId(Integer.parseInt(monitorId));        List<Map<String, Object>> listIPCPointIMG = ipcService.listIPCPointIMG(ipce);        return new IOTResult(true, "查看成功", listIPCPointIMG, 0);    }    // 物联网获得监视点    @CrossOrigin    @RequestMapping(value = "/listIPCPoint", method = RequestMethod.POST)    public IOTResult listIPCPoint(@RequestBody IPCPointRequset ipcPointRequset) {        IOTResult x = checkUtil.chckSession(ipcPointRequset, IPCPointRequset.class);        if (x != null) return x;        // 应该要改下逻辑        IPCPointEntity ipcPointEntity = new IPCPointEntity();        ipcPointEntity.setDeviceId(ipcPointEntity.getDeviceId());        List<Map<String, Object>> listIPCPointIMG = ipcService.listIPCPoint(ipcPointRequset);        if (listIPCPointIMG == null || listIPCPointIMG.isEmpty()) {            return new IOTResult(false, "暂无相关信息", null, 0);        }        return new IOTResult(true, "查看成功", listIPCPointIMG, 0);    }    // 物联网获得图片    @CrossOrigin    @RequestMapping(value = "/listLastIPCPointIMG", method = RequestMethod.POST)    public IOTResult listLastIPCPointIMG(@RequestBody IPCPointRequset ipcPointRequset) {        IOTResult x = checkUtil.chckSession(ipcPointRequset, IPCPointRequset.class);        if (x != null) return x;        Map<String, Object> listLastIPCPointImg = ipcService.listLastIPCPointImg(ipcPointRequset.getDeviceId());        if (listLastIPCPointImg == null || listLastIPCPointImg.isEmpty()) {            return new IOTResult(false, "暂无相关信息", null, 0);        }        return new IOTResult(true, "查看成功", listLastIPCPointImg, 0);    }    // 物联网获得图片    @CrossOrigin    @RequestMapping(value = "/listIPCPointIMG", method = RequestMethod.POST)    public IOTResult listIPCPointIMG(@RequestBody IPCPointRequset ipcPointRequset) {        IOTResult x = checkUtil.chckSession(ipcPointRequset, IPCPointRequset.class);        if (x != null) return x;        // 应该要改下逻辑        IPCPointEntity ipcPointEntity = new IPCPointEntity();        ipcPointEntity.setDeviceId(ipcPointEntity.getDeviceId());        if (ipcPointRequset.getApp() == 1) {            ipcPointRequset.setPagesize(3);        }        List<Map<String, Object>> listIPCPointIMG = ipcService.listIPCPointIMG(ipcPointRequset);        int listIPCPointIMGCount = ipcService.listIPCPointIMGCount(ipcPointRequset);        int totalpage = 0;        if (listIPCPointIMGCount % ipcPointRequset.getPagesize() > 0) {            totalpage = listIPCPointIMGCount / ipcPointRequset.getPagesize() + 1;        } else {            totalpage = listIPCPointIMGCount / ipcPointRequset.getPagesize();        }        ipcService.listIPCPointIMGCount(ipcPointRequset);        if (listIPCPointIMG == null || listIPCPointIMG.isEmpty()) {            return new IOTResult2(false, "暂无相关信息", null, 0, totalpage, listIPCPointIMGCount);        }        return new IOTResult2(true, "查看成功", listIPCPointIMG, 0, totalpage, listIPCPointIMGCount);    }    @CrossOrigin    @RequestMapping(value = "/testCoding", method = RequestMethod.GET)    public IOTResult testCoding() {        System.out.println("测试获得编码能力");        // VideoShemaBean ipcAbility = HkSdkEx.getIpcAbility("admin",        // "vr123456", "111.53.182.34", "9021");        VideoShemaBean ipcAbility = HkSdkEx.getIpcAbility("admin", "vr12345", "111.53.182.34", "9030");        VideoChannel subChannel = ipcAbility.getSubChannel();        String channelType = subChannel.getChannelType();        List<VideoResolution> solutions = subChannel.getSolutions();        System.out.println("子码流");        System.out.println(channelType);        List<VideoEncodeType> videoEncodeTypes = subChannel.getVideoEncodeTypes();        for (VideoResolution videoResolution : solutions) {            System.out.println("videoResolution index :" + videoResolution.getIndex());            System.out.println("videoResolution name" + videoResolution.getName());            System.out.println("videoResolution Resolution" + videoResolution.getResolution());            System.out.println("videoResolution VideoBitrate" + videoResolution.getVideoBitrate());            System.out.println("videoResolution VideoFrameRate" + videoResolution.getVideoFrameRate());        }        for (VideoEncodeType videoEncodeType : videoEncodeTypes) {            System.out.println("videoEncodeType VideoEncodeEfficiency :" + videoEncodeType.getVideoEncodeEfficiency());            System.out.println("videoEncodeType EncodeType :" + videoEncodeType.getVideoEncodeType());        }        VideoChannel mainChannel = ipcAbility.getMainChannel();        String channelType2 = mainChannel.getChannelType();        System.out.println(channelType2);        List<VideoResolution> solutions2 = mainChannel.getSolutions();        System.out.println("主码流");        List<VideoEncodeType> videoEncodeTypes2 = mainChannel.getVideoEncodeTypes();        for (VideoResolution videoResolution : solutions2) {            System.out.println("videoResolution index :" + videoResolution.getIndex());            System.out.println("videoResolution name" + videoResolution.getName());            System.out.println("videoResolution Resolution" + videoResolution.getResolution());            System.out.println("videoResolution VideoBitrate" + videoResolution.getVideoBitrate());            System.out.println("videoResolution VideoFrameRate" + videoResolution.getVideoFrameRate());        }        for (VideoEncodeType videoEncodeType : videoEncodeTypes2) {            System.out.println("videoEncodeType VideoEncodeEfficiency :" + videoEncodeType.getVideoEncodeEfficiency());            System.out.println("videoEncodeType EncodeType :" + videoEncodeType.getVideoEncodeType());        }        return null;    }    // 用前端调起摄像头    @CrossOrigin    @RequestMapping(value = "/getShopCamera", method = RequestMethod.POST)    public IOTResult getShopCamera(@RequestBody Map<String, String> map) {        String string = map.get("deviceId");//        s_nod:0;s_power:0;s_ip:192.168.0.170;s_port:80;s_username:admin;s_password:vr123456;s_online:1;s_stream:0;        // 应该要改下逻辑        IPCProxyEntity ipcEntity = new IPCProxyEntity();        ipcEntity.setMapingDeviceId(string);        ipcEntity.setType(1);        // 设置代理        Map<String, Object> proxy = ipcService.getProxy(ipcEntity);        if (proxy == null || proxy.get("id").toString().trim().length() < 1) {            return new IOTResult(false, "摄像头不存在", null, 0);        }        // String config = "s_host:192.168.0.234;s_rport:8000;s_lport:9001;s_pwr:1;s_pwrval:0;s_timeout:86400;";        String check =                "s_host:" + proxy.get("s_host") +                        ";s_port:" + proxy.get("s_hostport") +                        ";s_lport:" + proxy.get("s_proxy") +                        ";s_pwr:" + proxy.get("s_pwr") +                        ";s_pwrval:" + proxy.get("s_pwrval") +                        ";s_timeout:" + proxy.get("s_timeout") + ";";        PointEntity pointEntity = new PointEntity();        pointEntity.setDeviceId(proxy.get("deviceId").toString());        PointEntity point = pointService.getPoint(pointEntity);        proxy.put("ip", point.getIp());        proxy.put("x", point.getX());        proxy.put("y", point.getY());        // return new IOTResult(true,"查看成功",proxy,0);        String setIpcProxyEx1 = Client.setIpcProxyEx1("add", check, proxy.get("deviceId").toString(), point.getIp(),                point.getPort());        if (setIpcProxyEx1.equals("ok") || setIpcProxyEx1.equals("01")) {            return new IOTResult(true, "查看成功", proxy, 0);        }        return new IOTResult(false, "查看失败", proxy, 0);    }    // 用前端调起摄像头    @CrossOrigin    @RequestMapping(value = "/getCamera", method = RequestMethod.POST)    public IOTResult getCamera(@RequestBody Map<String, String> map) {        String string = map.get("mapingDeviceId");        // 应该要改下逻辑        IPCProxyEntity ipcEntity = new IPCProxyEntity();        int lastIndexOf = string.lastIndexOf(".");        String substring = string.substring(0, lastIndexOf);        ipcEntity.setMapingDeviceId(string);        ipcEntity.setType(2);        // 设置代理        Map<String, Object> proxy = ipcService.getProxy(ipcEntity);        if (proxy == null || proxy.get("id").toString().trim().length() < 1) {            return new IOTResult(false, "摄像头不存在", null, 0);        }        // String config =        // "s_host:192.168.0.234;s_rport:8000;s_lport:9001;s_pwr:1;s_pwrval:0;s_timeout:86400;";        String check = "s_host:" + proxy.get("s_host") +                ";s_rport:" + proxy.get("s_hostport") +                ";s_lport:" + proxy.get("s_proxy") +                ";s_pwr:" + proxy.get("s_pwr") +                ";s_pwrval:" + proxy.get("s_pwrval")                + ";s_timeout:" + proxy.get("s_timeout") + ";";        PointEntity pointEntity = new PointEntity();        pointEntity.setDeviceId(proxy.get("deviceId").toString());        PointEntity point = pointService.getPoint(pointEntity);        proxy.put("ip", point.getIp());        String setIpcProxyEx1 = Client.setIpcProxyEx1("add", check, proxy.get("deviceId").toString(), point.getIp(),                point.getPort());        // s_host:192.168.0.234;s_port:8000;s_lport:9100;s_pwr:1;s_pwrval:0;s_timeout:180;        // s_host:192.168.0.234;s_rport:8000;s_lport:9100;s_pwr:1;s_pwrval:0;s_timeout:60;        if (setIpcProxyEx1.equals("ok") || setIpcProxyEx1.equals("01")) {            return new IOTResult(true, "查看成功", proxy, 0);        }        // String check2 =        // toolUtil.getCheck(ToolUtil.VIDEO+ToolUtil.CTRL+string);        // if(check2 == null){        // toolUtil.setCheck(ToolUtil.VIDEO+ToolUtil.CTRL+string, check2);        // toolUtil.setCheckexpire(ToolUtil.VIDEO+ToolUtil.CTRL+string,        // Integer.parseInt(proxy.get("s_timeout").toString()));        // String setIpcProxyEx1 = Client.setIpcProxyEx1("add", check,        // proxy.get("deviceId").toString(), point.getIp(), point.getPort());        // System.out.println(setIpcProxyEx1);        //// }        // return new IOTResult(true,"查看成功",proxy,0);        // }        // String setIpcProxyEx1 = Client.setIpcProxyEx1("add", check,        // proxy.get("deviceId").toString(), point.getIp(), point.getPort());        System.out.println(setIpcProxyEx1);        return new IOTResult(false, "查看失败", null, 0);    }    // 清空监视点    // 后台调起摄像头    // 获取日志    // 软件更新    // 控制采集服务    // 开关量控制}